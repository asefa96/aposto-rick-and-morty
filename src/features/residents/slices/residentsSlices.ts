import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState} from "../../../store/store";
import { generateChunkedArr } from "../../../helpers/generateChunk";
import RickAndMortyService from "../../../services/RickAndMorty.service";
import {IResident } from "../types";

export interface ResidentState {
  resident?: Array<IResident>;
  status: "idle" | "loading" | "failed";
  currentLocation: string;
  residents: Array<string>;
  residentUrls: Array<string>;
}

const initialState: ResidentState = {
  resident: undefined,
  status: "idle",
  currentLocation: "",
  residents: [""],
  residentUrls: [""],
};

type residentsPage = {
  locationId:number;
  pagination: number;
};
// The function below is called a th"unk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchResidents = createAsyncThunk(
  "locations/fetchResidents",
  async (locationState:residentsPage) => {
    const {pagination,locationId}=locationState

    const {residents}=await RickAndMortyService.getLocationById(locationId);
    const chunkedResidentsUrls=generateChunkedArr(residents,4,String(pagination));

    console.log("urls ",chunkedResidentsUrls)

    const data = await RickAndMortyService.getResidents(chunkedResidentsUrls);

    return data;
  }
);

export const residentsSlice = createSlice({
  name: "residents",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setResidentUrls(state, { payload }) {
      state.residentUrls = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchResidents.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchResidents.fulfilled, (state, action) => {
        state.status = "idle";
        state.resident = action.payload;
      })
      .addCase(fetchResidents.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const { setResidentUrls } = residentsSlice.actions;
export const selectCount = (state: RootState) => state.resident.resident;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default residentsSlice.reducer;
